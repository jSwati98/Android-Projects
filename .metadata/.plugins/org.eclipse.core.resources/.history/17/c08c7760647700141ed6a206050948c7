package com.android.prescriptionGuide;

/*package com.android.prescriptionGuide;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;

import com.android.prescriptionGuide.BST.Node;

public class BST <T extends Comparable<T>> implements Iterable<T>
{
   public static void getTree(ArrayList<String> a) throws FileNotFoundException
   {
	   //BufferedReader reader = new BufferedReader(new FileReader("hello/src/hello/file.txt"));
	   
	  // ClassLoader classLoader = getClass().getClassLoader();
	//	File file = new File(classLoader.getResource("file.txt").getFile());
		Scanner scanner = new Scanner("file.txt");
	   String line = null;
	   String a[] = new String[50];
	   int i = 0;
	   while ((scanner) != null){
		  a[i] = line;
		  i++;
	   }
	 //  String[] a = {"swaaa","hencee","uiiiiii","popopo","tttt"};
     BST<String> bst = new BST<String>();
      for(String n : a) bst.insert(n);

      bst.preOrderTraversal();
      System.out.println();

      //testing comparator
      //build a mirror BST with a rule:  Left > Parent > Right
      //code for the comparator at the bottom of the file
      bst = new BST<String>(new MyComp1());
      for(String n : a) bst.insert(n);

      bst.preOrderTraversal();
      System.out.println();
     // bst.inOrderTraversal();
      System.out.println();


      for(String n : bst) System.out.print(n);
      System.out.println();

     // System.out.println(bst);

      //testing restoring a tree from two given traversals
      bst.restore(new String[] {11,8,6,4,7,10,19,43,31,29,37,49},
                      new Integer[] {4,6,7,8,10,11,19,29,31,37,43,49});
     // bst.preOrderTraversal();
      //System.out.println();
      //bst.inOrderTraversal();
      System.out.println();

      //testing diameter
     // System.out.println("diameter = " + bst.diameter());
      //testing width
    //  System.out.println("width = " + bst.width());
   }


   private Node<T> root;
   private Comparator<T> comparator;

   public BST()
   {
      root = null;
      comparator = null;
   }

   public BST(Comparator<T> comp)
   {
      root = null;
      comparator = comp;
   }

   private int compare(T x, T y)
   {
      if(comparator == null) return x.compareTo(y);
      else
      return comparator.compare(x,y);
   }

*//*****************************************************
*
*            INSERT
*
******************************************************//*
   public void insert(T data)
   {
      root = insert(root, data);
   }
   private Node<T> insert(Node<T> p, T toInsert)
   {
      if (p == null)
         return new Node<T>(toInsert);

      if (compare(toInsert, p.data) == 0)
      	return p;

      if (compare(toInsert, p.data) < 0)
         p.left = insert(p.left, toInsert);
      else
         p.right = insert(p.right, toInsert);

      return p;
   }

*//*****************************************************
*
*            SEARCH
*
******************************************************//*
   public boolean search(T toSearch)
   {
      return search(root, toSearch);
   }
   private boolean search(Node<T> p, T toSearch)
   {
      if (p == null)
         return false;
      else
      if (compare(toSearch, p.data) == 0)
      	return true;
      else
      if (compare(toSearch, p.data) < 0)
         return search(p.left, toSearch);
      else
         return search(p.right, toSearch);
   }

*//*****************************************************
*
*            DELETE
*
******************************************************//*

   public void delete(T toDelete)
   {
      root = delete(root, toDelete);
   }
   private Node<T> delete(Node<T> p, T toDelete)
   {
      if (p == null)  throw new RuntimeException("cannot delete.");
      else
      if (compare(toDelete, p.data) < 0)
      p.left = delete (p.left, toDelete);
      else
      if (compare(toDelete, p.data)  > 0)
      p.right = delete (p.right, toDelete);
      else
      {
         if (p.left == null) return p.right;
         else
         if (p.right == null) return p.left;
         else
         {
         // get data from the rightmost node in the left subtree
            p.data = retrieveData(p.left);
         // delete the rightmost node in the left subtree
            p.left =  delete(p.left, p.data) ;
         }
      }
      return p;
   }
   private T retrieveData(Node<T> p)
   {
      while (p.right != null) p = p.right;

      return p.data;
   }

*//*************************************************
 *
 *            toString
 *
 **************************************************//*

   public String toString()
   {
      StringBuffer sb = new StringBuffer();
      for(T data : this) sb.append(data.toString());

      return sb.toString();
   }

*//*************************************************
 *
 *            TRAVERSAL
 *
 **************************************************//*

   public void preOrderTraversal()
   {
      preOrderHelper(root);
   }
   private void preOrderHelper(Node r)
   {
      if (r != null)
      {
         System.out.print(r+" ");
         preOrderHelper(r.left);
         preOrderHelper(r.right);
      }
   }

   public void inOrderTraversal()
   {
      inOrderHelper(root);
   }
   private void inOrderHelper(Node r)
   {
      if (r != null)
      {
         inOrderHelper(r.left);
         System.out.print(r+" ");
         inOrderHelper(r.right);
      }
   }

*//*************************************************
 *
 *            CLONE
 *
 **************************************************//*

   public BST<T> clone()
   {
      BST<T> twin = null;

      if(comparator == null)
         twin = new BST<T>();
      else
         twin = new BST<T>(comparator);

      twin.root = cloneHelper(root);
      return twin;
   }
   private Node<T> cloneHelper(Node<T> p)
   {
      if(p == null)
         return null;
      else
         return new Node<T>(p.data, cloneHelper(p.left), cloneHelper(p.right));
   }

*//*************************************************
 *
 *            MISC
 *
 **************************************************//*

   public int height()
   {
      return height(root);
   }
   private int height(Node<T> p)
   {
      if(p == null) return -1;
      else
      return 1 + Math.max( height(p.left), height(p.right));
   }

   public int countLeaves()
   {
      return countLeaves(root);
   }
   private int countLeaves(Node<T> p)
   {
      if(p == null) return 0;
      else
      if(p.left == null && p.right == null) return 1;
      else
      return countLeaves(p.left) + countLeaves(p.right);
   }



  //This method restores a BST given preorder and inorder traversals
   public void restore(T[] pre, T[] in)
   {
      root = restore(pre, 0, pre.length-1, in, 0, in.length-1);
   }
   private Node<T> restore(T[] pre, int preL, int preR, T[] in, int inL, int inR)
   {
      if(preL <= preR)
      {
         int count = 0;
         //find the root in the inorder array
         while(pre[preL] != in[inL + count]) count++;

         Node<T> tmp = new Node<T>(pre[preL]);
         tmp.left = restore(pre, preL+1, preL + count, in, inL, inL +count-1);
         tmp.right = restore(pre, preL+count+1, preR, in, inL+count+1, inR);
         return tmp;
      }
      else
         return null;
   }


   //The width of a binary tree is the maximum number of elements on one level of the tree.
   public int width()
   {
      int max = 0;
      for(int k = 0; k <= height(); k++)
      {
         int tmp = width(root, k);
         if(tmp > max) max = tmp;
      }
      return max;
   }
   //rerturns the number of node on a given level
   public int width(Node<T> p, int depth)
   {
      if(p==null) return 0;
      else
      if(depth == 0) return 1;
      else
      return width(p.left, depth-1) + width(p.right, depth-1);
   }

   //The diameter of a tree is the number of nodes
   //on the longest path between two leaves in the tree.
   public int diameter()
   {
      return diameter(root);
   }
   private int diameter(Node<T> p)
   {
      if(p==null) return 0;

      //the path goes through the root
      int len1 = height(p.left) + height(p.right) +3;

      //the path does not pass the root
      int len2 = Math.max(diameter(p.left), diameter(p.right));

      return Math.max(len1, len2);
   }


*//*****************************************************
*
*            TREE ITERATOR
*
******************************************************//*

   public Iterator<T> iterator()
   {
      return new MyIterator();
   }
   //pre-order
   private class MyIterator implements Iterator<T>
   {
      Stack<Node<T>> stk = new Stack<Node<T>>();

      public MyIterator()
      {
         if(root != null) stk.push(root);
      }
      public boolean hasNext()
      {
         return !stk.isEmpty();
      }

      public T next()
      {
         Node<T> cur = stk.peek();
         if(cur.left != null)
         {
            stk.push(cur.left);
         }
         else
         {
            Node<T> tmp = stk.pop();
            while( tmp.right == null )
            {
               if(stk.isEmpty()) return cur.data;
               tmp = stk.pop();
            }
            stk.push(tmp.right);
         }

         return cur.data;
      }//end of next()

      public void remove()
      {

      }
   }//end of MyIterator

*//*****************************************************
*
*            the Node class
*
******************************************************//*

 class Node<T>
   {
      private T data;
      private Node<T> left, right;

      public Node(T data, Node<T> l, Node<T> r)
      {
         left = l; right = r;
         this.data = data;
      }

      public Node(T data)
      {
         this(data, null, null);
      }

      public String toString()
      {
         return data.toString();
      }
   } //end of Node
 class Solution<T> {
	    public Node<T> buildTree(T[] inorder, T[] postorder) {
	        int inStart = 0;
	        int inEnd = inorder.length-1;
	        int postStart =0;
	        int postEnd = postorder.length-1;
	 
	        return buildTree(inorder, inStart, inEnd, postorder, postStart, postEnd);
	    }
	 
	    public Node<T> buildTree(T[] inorder, int inStart, int inEnd, 
	    		T[] postorder, int postStart, int postEnd){
	        if(inStart > inEnd || postStart > postEnd)
	            return null;
	 
	        String rootValue = (String) postorder[postEnd];
	        Node<T> root = new Node<T>(postorder[postEnd]);
	 
	        int k=0;
	        for(int i=0; i< inorder.length; i++){
	            if(inorder[i]==rootValue){
	                k = i;
	                break;
	            }
	        }
	 
	        root.left = buildTree(inorder, inStart, k-1, postorder, postStart, postStart+k-(inStart+1));
	        // Becuase k is not the length, it it need to -(inStart+1) to get the length
	        root.right = buildTree(inorder, k+1, inEnd, postorder, postStart+k-inStart, postEnd-1);
	        // postStart+k-inStart = postStart+k-(inStart+1) +1
	 
	        return root;
	    }
	}
}//end of BST


class MyComp1 implements Comparator<String>
{
   public int compare(String x, String y)
   {
        return y.compareTo(x);
   }
}*/


import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;

import com.authorwjf.talk2me.R;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.sax.StartElementListener;
import android.speech.RecognitionService.Callback;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.speech.tts.UtteranceProgressListener;
import android.speech.tts.TextToSpeech.OnInitListener;
import android.speech.tts.TextToSpeech.OnUtteranceCompletedListener;
import android.widget.RemoteViews;
import android.widget.TextView;
import android.widget.Toast;

public class BST <T extends Comparable<T>>  implements Iterable<T>
{
	protected static final int REQUEST_OK = 1;
	//MainActivity mainAc = new MainActivity();
	static String spokenData;
	static TextToSpeech ttobj;
	static Context context;
	Node<T> current ;
	HashMap<String, String> map = new HashMap<String, String>();
	public static void getTree(ArrayList<String> a, Context c) throws FileNotFoundException
   {
	  // String[] a = { "Do you sneeze", "Do you have red nose", "Do you have irritation", "Do you sleep well","Do you snore","do you feel irritated", "Do you stress"};
	//[] a = { "D", "E",  "B", "C", "A","F","G","H","I","J"};
	  // String[] a = { "9", "2",  "3", "4", "5","6","7","8","1"};
	   ArrayList<element> Elements= new ArrayList<element>();
	   context = c;
	   System.out.println("in BST --------->"+a);
	   System.out.println("c1------->"+c);
	   System.out.println("ttobj1 ---->"+ttobj);
	   
      BST bst = new BST();
      int values[] = {33, 23, 20, 15, 12, 10, 27, 5, 18 , 3, 14, 49, 42, 39, 9, 35, 7, 46, 50, 17, 44, 38, 34, 8, 47, 21, 53, 26, 30, 4, 41, 11, 2, 43, 16, 24, 29, 52, 41, 31, 1, 6, 13, 51, 45, 36, 37, 13, 25, 32, 28, 48, 22};
    	  //{9, 6, 5, 3, 4, 1, 2, 7, 6, 8};
     System.out.println("a array"+a.size());
     int index = 0;
      for(index = 0 ; index < a.size(); index++){
    	  int current = values[index] - 1;
    	  System.out.println(a.get(current)+"   ");
    	  element e = new element(a.get(current), values[index]); 
    	  Elements.add(e);
      
   }
      
     /*for(element n : Elements){
    	 
    	 bst.insert(n);
     }*/
      
     //Solution<String> s = new Solution<String>();
     // Solution s = new Solution(); 
     // System.out.println(s.buildTree(a, b));
     // bst.preOrderTraversal();
      System.out.println();

      //testing comparator
      //build a mirror BST with a rule:  Left > Parent > Right
      //code for the comparator at the bottom of the file
      /*bst = new BST<String>(new MyComp1());
      for(String n : a) bst.insert(n);

     // bst.preOrderTraversal();
      System.out.println();*/
     // bst.inOrderTraversal();
      System.out.println("aafter insert operaton array");
     /* for(element n : bst)
      System.out.println(n.data+" ");
*/
      System.out.println();
      System.out.println("PReOrder");
      System.out.println("");
     // bst.preOrderTraversal();
      System.out.println();
      System.out.println("inOrder");
      System.out.println("");
     //bst.inOrderTraversal();
      System.out.println("Search--->");
     /* boolean isSearch = bst.search("Do you sneeze");
      System.out.println("isSearch -->"+isSearch);
      
      if(bst.search("Do you sneeze")){
    	  System.out.println("----->");
      }*/
     /* for(String n : bst)
          System.out.println(n+" ");*/
      /*for(String n : bst) System.out.print(n);*/
    //  System.out.println();

     // System.out.println(bst);

      //testing restoring a tree from two given traversals
     /* bst.restore(new String[] {11,8,6,4,7,10,19,43,31,29,37,49},
                      new Integer[] {4,6,7,8,10,11,19,29,31,37,43,49});*/
     // bst.preOrderTraversal();
      //System.out.println();
      //bst.inOrderTraversal();
      System.out.println();

      //testing diameter
     // System.out.println("diameter = " + bst.diameter());
      //testing width
    //  System.out.println("width = " + bst.width());
     // return preBstOrder;
   }


   private Node<T> root;
   private element<T> elNode;
   private Comparator<T> comparator;

   public BST()
   {
      root = null;
      comparator = null;
      elNode = null;
   }

   public BST(Comparator<T> comp)
   {
      root = null;
      comparator = comp;
   }

   private int compare(T x, T y)
   {
      if(comparator == null) return x.compareTo(y);
      else
      return comparator.compare(x,y);
   }

/*****************************************************
*
*            INSERT
*
******************************************************/
   public void insert(element<T> data)
   {
      root = insert(root, data.data, data.index);
   }
   private Node<T> insert(Node<T> p, T toInsert, T toVal)
   {
      
	   System.out.println("heyyy!!!!!!!!");
	   System.out.println("P is---------->"+toInsert+"toVal-->"+toVal);
	   if (p == null){
		   System.out.println("P firstttttttt---------->"+toInsert+"toVal-->"+toVal);
    	  return new Node<T>(toInsert, toVal);
      }

      if (compare(toVal, p.val) == 0){
    	 // System.out.println("P 2"+p);
    	  return p;
      }

      if (compare(toVal, p.val) < 0){
    	  System.out.println("in leftf---->"+p);
    	//  System.out.println("P 3"+p);
    	  p.left = insert(p.left, toInsert, toVal);
      }
      else{
    	  System.out.println("in right---->"+p);
    	  p.right = insert(p.right, toInsert, toVal);
      }

    //  System.out.println("P 5"+p);
      return p;
   }

/*****************************************************
*
*            SEARCH
*
******************************************************/
   public boolean search(T toSearch)
   {
      return search(root, toSearch);
   }
   private boolean search(Node<T> p, T toSearch)
   {
      if (p == null)
         return false;
      else
      if (compare(toSearch, p.data) == 0){
    	  System.out.println();
    	  p = p.left;
    	  System.out.println("left--->"+p.data);  
    	  return true;
      	
      }
      else
      if (compare(toSearch, p.data) < 0)
         return search(p.left, toSearch);
      else
         return search(p.right, toSearch);
   }

/*****************************************************
*
*            DELETE
*
******************************************************/

   public void delete(T toDelete)
   {
      root = delete(root, toDelete);
   }
   private Node<T> delete(Node<T> p, T toDelete)
   {
      if (p == null)  throw new RuntimeException("cannot delete.");
      else
      if (compare(toDelete, p.data) < 0)
      p.left = delete (p.left, toDelete);
      else
      if (compare(toDelete, p.data)  > 0)
      p.right = delete (p.right, toDelete);
      else
      {
         if (p.left == null) return p.right;
         else
         if (p.right == null) return p.left;
         else
         {
         // get data from the rightmost node in the left subtree
            p.data = retrieveData(p.left);
         // delete the rightmost node in the left subtree
            p.left =  delete(p.left, p.data) ;
         }
      }
      return p;
   }
   private T retrieveData(Node<T> p)
   {
      while (p.right != null) p = p.right;

      return p.data;
   }

/*************************************************
 *
 *            toString
 *
 **************************************************/

   public String toString()
   {
      StringBuffer sb = new StringBuffer();
      for(T data : this) sb.append(data.toString());

      return sb.toString();
   }

/*************************************************
 *
 *            TRAVERSAL
 *
 **************************************************/
   public void speakText(final String s,final Node r){
	      final String toSpeak = "hiiiiiiiiiiiiiiiiiiiiiii";
	    
	      
     	 ttobj=new TextToSpeech(context, 
     		      new TextToSpeech.OnInitListener() {
     		      @Override
     		      public void onInit(int status) {
     		         if(status != TextToSpeech.ERROR){
     		        	 System.out.println("In object creation");
     		             ttobj.setLanguage(Locale.UK);
     		             //ttobj(null);
     		            map.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, "UniqueID");
     		            ttobj.speak(s, TextToSpeech.QUEUE_FLUSH, map);
     		             ttobj.setOnUtteranceProgressListener(new UtteranceProgressListener() {
        						
        						@Override
        						public void onDone(String utteranceId) {
        							// TODO Auto-generated method stub
        							System.out.println("uttereance complete!!!");
        							  /*Intent i = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        								  
        								//findViewById(R.id.button1).setOnClickListener(this); Intent i = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        							         i.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, "en-US");
        							         try {
        							            ((Activity) context).startActivityForResult(i, REQUEST_OK);
        							        	 //startActivityForResult(i, REQUEST_OK);
        							        	 System.out.println("777777777");
        							         } catch (Exception e) {
        							        	 System.out
														.println("Error initializing speech to text engine.");
        							         }*/
        							System.out.println("m ------>");
        							MainActivity.getInstance().startRecognition(r); 
        							/*
        							// this intent points to activity that should handle results
        							Intent activityIntent = new Intent(context, MainActivity.class);
        							// this intent wraps results activity intent
        							PendingIntent resultsPendingIntent = PendingIntent.getActivity(context, 0, activityIntent, 0);

        							// this intent calls the speech recognition
        							Intent voiceIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        							voiceIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        							voiceIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Speech recognition demo");
        							voiceIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        							voiceIntent.putExtra(RecognizerIntent.EXTRA_RESULTS_PENDINGINTENT, resultsPendingIntent);

        							// this intent wraps voice recognition intent
        							PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, voiceIntent, 0);
        							RemoteViews rv_main=new RemoteViews(context.getPackageName(),R.layout.activity_main);
        							rv_main.setOnClickPendingIntent(R.id.button1, pendingIntent);*/
        						
        						}

  								@Override
  								public void onError(String arg0) {
  									// TODO Auto-generated method stub
  									System.out.println("errror-->");
  								}

  								@Override
  								public void onStart(String arg0) {
  									System.out.println("start-->");
  									// TODO Auto-generated method stub
  									
  								}
        					});
     		             
     		            }
     		       
     		         }
     		      });
     	 
	     
		   
	   }
   
   
   public void navigate(String spokenData, Node current2){
		 this.spokenData = spokenData;
		 System.out.println("spokenData---->"+this.spokenData);
		 //if yes go to right 
		 System.out.println("current navigate---->"+current2);
		 System.out.println("this.current.right----->"+current2.right);
		 System.out.println("this.current.left----->"+current2.left);
		 if(spokenData.equals("yes"))
		 { 
			 System.out.println("YESSSSSSSSSSS");
			 preOrderHelper(current2.right);
		 }
		 else{
			 System.out.println("Noooooooooo");
			 preOrderHelper(current2.left);
		 }
   }
  /* @Override
   protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	   System.out.println("lllllllllllllllllllllll");
       super.onActivityResult(requestCode, resultCode, data);
       if (requestCode==REQUEST_OK  && resultCode==RESULT_OK) {
       	ArrayList<String> thingsYouSaid = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
       	
      	 System.out.println("11111111111");        	 
       	 //((TextView)findViewById(R.id.text1)).setText( "hiii");
       	 System.out.println("2222222222"+thingsYouSaid);
       	 
			}
   }*/
  
  
ArrayList preBst = new ArrayList();
ArrayList preBstFinal = new ArrayList();

   public void preOrderTraversal()
   {
	   System.out.println("root--->"+root);
	  // preBstFinal = 
			   preOrderHelper(root);
     // return preBstFinal;
   }
   
   private void preOrderHelper(Node r)
   {
      if (r != null)
      {
    	  System.out.println("in preeeeorderrrr");
    	  //preBst.add(r);
    	  this.current = r;
    	  System.out.println("current in pre------>"+this.current);
    	  System.out.print("here------------"+r+" ");
    	  System.out.println("r.data.toString()---->"+r.data.toString());
    	  
    	  speakText(r.data.toString(), r);
         
        
      }
	//return preBst;
   }

   public void inOrderTraversal()
   {
      inOrderHelper(root);
   }
   private void inOrderHelper(Node r)
   {
      if (r != null)
      {
         inOrderHelper(r.left);
         System.out.print(r+" ");
         inOrderHelper(r.right);
      }
   }

/*************************************************
 *
 *            CLONE
 *
 **************************************************/

/*   public BST<T> clone()
   {
      BST<T> twin = null;

      if(comparator == null)
         twin = new BST<T>();
      else
         twin = new BST<T>(comparator);

      twin.root = cloneHelper(root);
      return twin;
   }
   private Node<T> cloneHelper(Node<T> p)
   {
      if(p == null)
         return null;
      else
         return new Node<T>(p.data, cloneHelper(p.left), cloneHelper(p.right));
   }*/

/*************************************************
 *
 *            MISC
 *
 **************************************************/

   public int height()
   {
      return height(root);
   }
   private int height(Node<T> p)
   {
      if(p == null) return -1;
      else
      return 1 + Math.max( height(p.left), height(p.right));
   }

   public int countLeaves()
   {
      return countLeaves(root);
   }
   private int countLeaves(Node<T> p)
   {
      if(p == null) return 0;
      else
      if(p.left == null && p.right == null) return 1;
      else
      return countLeaves(p.left) + countLeaves(p.right);
   }



  //This method restores a BST given preorder and inorder traversals
  /* public void restore(T[] pre, T[] in)
   {
      root = restore(pre, 0, pre.length-1, in, 0, in.length-1);
   }
   private Node<T> restore(T[] pre, int preL, int preR, T[] in, int inL, int inR)
   {
      if(preL <= preR)
      {
         int count = 0;
         //find the root in the inorder array
         while(pre[preL] != in[inL + count]) count++;

         Node<T> tmp = new Node<T>(pre[preL]);
         tmp.left = restore(pre, preL+1, preL + count, in, inL, inL +count-1);
         tmp.right = restore(pre, preL+count+1, preR, in, inL+count+1, inR);
         return tmp;
      }
      else
         return null;
   }
*/

   //The width of a binary tree is the maximum number of elements on one level of the tree.
   public int width()
   {
      int max = 0;
      for(int k = 0; k <= height(); k++)
      {
         int tmp = width(root, k);
         if(tmp > max) max = tmp;
      }
      return max;
   }
   //rerturns the number of node on a given level
   public int width(Node<T> p, int depth)
   {
      if(p==null) return 0;
      else
      if(depth == 0) return 1;
      else
      return width(p.left, depth-1) + width(p.right, depth-1);
   }

   //The diameter of a tree is the number of nodes
   //on the longest path between two leaves in the tree.
   public int diameter()
   {
      return diameter(root);
   }
   private int diameter(Node<T> p)
   {
      if(p==null) return 0;

      //the path goes through the root
      int len1 = height(p.left) + height(p.right) +3;

      //the path does not pass the root
      int len2 = Math.max(diameter(p.left), diameter(p.right));

      return Math.max(len1, len2);
   }


/*****************************************************
*
*            TREE ITERATOR
*
******************************************************/

   public Iterator<T> iterator()
   {
      return new MyIterator();
   }
   //pre-order
   private class MyIterator implements Iterator<T>
   {
      Stack<Node<T>> stk = new Stack<Node<T>>();

      public MyIterator()
      {
         if(root != null) stk.push(root);
      }
      public boolean hasNext()
      {
         return !stk.isEmpty();
      }

      public T next()
      {
         Node<T> cur = stk.peek();
         if(cur.left != null)
         {
            stk.push(cur.left);
         }
         else
         {
            Node<T> tmp = stk.pop();
            while( tmp.right == null )
            {
               if(stk.isEmpty()) return cur.data;
               tmp = stk.pop();
            }
            stk.push(tmp.right);
         }

         return cur.data;
      }//end of next()

      public void remove()
      {

      }
   }//end of MyIterator

/*****************************************************
*
*            the Node class
*
******************************************************/

   static class Node<T>
   {
      private T data;
      private T val;
      private Node<T> left, right;

      public Node(T data,T val, Node<T> l, Node<T> r)
      {
         left = l; right = r;
         this.data = data;
         this.val= val;
      }

      public Node(T data, T val)
      {
         this(data,val, null, null);
      }

      public String toString()
      {
         return data.toString();
      }
   } //end of Node
   
   public static class element<T>{
		public T index;
		public T data;
		
		public element(T data,T index)
	      {
	         
	         this.data = data;
	         this.index = index;
	      }

	     /* public element(T data, int index)
	      {
	         this(data,index);
	      }
*/
	      public String toString()
	      {
	         return data.toString();
	      }
		
	}
 





   
   
}//end of BST

class MyComp1 implements Comparator<Integer>
{
   public int compare(Integer x, Integer y)
   {
        return y.compareTo(x);
   }
}